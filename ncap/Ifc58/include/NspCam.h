/******************************************************************************
 *
 * MODULE   
 *		NspCam.h
 *
 * REVISION INFORMATION  
 *		$Logfile: /ifc/include/NspCam.h $
 *		$Revision: 1.1 $
 *		$Modtime: 7/14/04 4:19p $
 *
 * ABSTRACT  
 *		IFC interface of the CNetSightII class.
 *
 * TECHNICAL NOTES 
 *
 *
 * Copyright (c) 1999-2004 Coreco Imaging , Inc.  All rights reserved.
 *
 ******************************************************************************/

#if !defined(AFX_NSPCAM_H__582D6F70_E7BC_11D2_B53F_00A0C99ACB20__INCLUDED_)
#define AFX_NSPCAM_H__582D6F70_E7BC_11D2_B53F_00A0C99ACB20__INCLUDED_

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000

#ifdef __cplusplus
class CNSIICam;
#endif

#include <ifcstd.h>
#include <ifcclass.h>
#include <Camera.h>


typedef enum {
	NSP_VIDEO_STD_NTSC	=1,
	NSP_VIDEO_STD_PAL,
	NSP_VIDEO_STD_SECAM,
	NSP_VIDEO_STD_NONE
} NSP_VIDEO_STANDARD_TYPE;

typedef enum {
	NSP_FIELD_PROCESS_ALL	=1,
	NSP_FIELD_PROCESS_ODD_ONLY,
	NSP_FIELD_PROCESS_EVEN_ONLY

} NSP_FIELD_PROCESS_TYPE;


typedef enum {
	NSP_LOW_IS_ODD,
	NSP_LOW_IS_EVEN
} NSP_PWG_FLD_POL_TYPE;

typedef enum {
	NSP_FLD_SRC_SYNC_STRIPPER,
	NSP_FLD_SRC_GENERATED_BASED_ON_H_AND_V_SYNC
} NSP_FLD_SRC_TYPE;



typedef enum {
	NSP_SYNC_COMPOSITE_VIDEO=1,
	NSP_SYNC_SEPARATE_SYNC=3,
	NSP_SYNC_INTERNAL_SYNC=4,
	NSP_SYNC_RED=5,
	NSP_SYNC_GREEN,
	NSP_SYNC_BLUE

} NSP_SYNC_SRC_TYPE;

typedef enum {
	NSP_SYNC_STRIPPER_BACK_PORCH,
	NSP_PROGRAMMABLE
} NSP_CLAMP_SRC_TYPE;

#define NSP_NUM_LUT_ENTRIES 0x100
#define NSP_NUM_LUT_CHANNELS 3


typedef enum {
	NSP_CREF_HSYNC_FROM_STRIPPER,
	NSP_CREF_TIMING_MODE_DEPENDANT	

} NSP_PRGM_CLAMP_REF_POINT_TYPE;


typedef enum {
	NSP_PIXEL_CLOCK_INTERNAL,
	NSP_PIXEL_CLOCK_EXTERNAL

} NSP_PIXEL_CLOCK_TYPE;

typedef enum {
	NSP_UART_PORT_AUTO,
	NSP_UART_PORT_CAM0,	
	NSP_UART_PORT_CAM1,	
	NSP_UART_PORT_CAM2
} NSP_UART_PORT_TYPE;


typedef enum {
	NSP_SINGLE_TAP,
	NSP_2TAP_ILACE_TOGGLE,
	NSP_2TAP_ILACE_FIXED
} NSP_MULTITAP_MODE_TYPE;


#define NSP_PECULIAR_PARAM_BASE (MOD_PECULIAR_PARAM_BASE + 0x3000 )




typedef enum {
	NSP_TICK_BASE_TIME_USEC,
	NSP_TICK_BASE_SHAFT,

} NSP_TICK_BASE_TYPE;

typedef enum {
	NSP_REJ_SRC_REJECT_SENSOR,
	NSP_REJ_SRC_GRAB_PART_SENSOR,
	NSP_REJ_SRC_VS_LEADING_EDGE,
	NSP_REJ_SRC_TRIG_NONE   
} NSP_REJ_TRIG_SRC_TYPE;

typedef enum {
	NSP_DECISION_ACCEPT,
	NSP_DECISION_RECYCLE,
	NSP_DECISION_REJECT

} NSP_AIO_DECISION_TYPE;

typedef enum {
	NSP_REJECTOR_1,	
	NSP_REJECTOR_2
} NSP_REJECTOR_ID_TYPE;

typedef enum {
	NSP_PLANAR_DISABLED,
	NSP_PLANAR_HORZ,
	NSP_PLANAR_VERT
} NSP_PLANAR_MODE_TYPE;


#include <NSII.h>

typedef enum {

	NSP_CLAMP_START = NSP_PECULIAR_PARAM_BASE,
	NSP_CLAMP_END,
	NSP_FIELD_PROCESS,
	NSP_MASTER_HSYNC,
	NSP_VS_PULSE_ENABLE,
	NSP_VS_PULSE_OFFSET,
	NSP_VS_PULSE_DURATION,
	NSP_LOW_PASS_FILTER,
	NSP_SYNC_SOURCE,
	NSP_ADD_VSYNC_TO_FRAME_RESET,
	NSP_ADD_FRAME_RESET_TO_VSYNC,
	NSP_SELECT_UART_PORT,
	NSP_MULTITAP_MODE,
	NSP_HORZ_FRONT_PORCH,
	NSP_HORZ_BACK_PORCH,
	NSP_VSYNC_WAIT_COUNT,
	NSP_VSYNC_ALIGN_ON_HS,
	NSP_FRAME_RESET_ALIGN_ON_HS,
	NSP_STROBE_ALIGN_ON_HS,
	NSP_VSYNC_OUT_ENABLE,
	NSP_SYNC_OUT_ALL_CONN,
	NSP_PLL_GAIN,
	NSP_PLANAR_MODE,
	NSP_STROBE_OUTPUT_PIN,
	NSP_EXT_TRIG_INPUT_PIN,

	NSP_AIO_ENABLE,
	NSP_AIO_TICK_BASE_UNIT,

	NSP_AIO_EXT_TRIG_DELAY,

	NSP_AIO_REJECT_SENSOR_INPUT,
	NSP_AIO_REJECT_SENSOR_DEBOUNCE,
	NSP_AIO_REJECT_SENSOR_POLARITY,

	NSP_AIO_SHAFT_ENC_INPUT,
	NSP_AIO_SHAFT_ENC_DEBOUNCE,
	NSP_AIO_SHAFT_ENC_IDLE_TIME,

	NSP_AIO_REJ1_ENABLE,
	NSP_AIO_REJ1_OUTPUT,
	NSP_AIO_REJ1_DELAY,
	NSP_AIO_REJ1_DURATION,
	NSP_AIO_REJ1_DEF_OBJ_INDEX,
	NSP_AIO_REJ1_POL_REJECT,
	NSP_AIO_REJ1_TRIG_SRC,
	NSP_AIO_REJ1_DEF_DECISION,

	NSP_AIO_REJ2_ENABLE,
	NSP_AIO_REJ2_OUTPUT,
	NSP_AIO_REJ2_DELAY,
	NSP_AIO_REJ2_DURATION,
	NSP_AIO_REJ2_DEF_OBJ_INDEX,
	NSP_AIO_REJ2_POL_REJECT,
	NSP_AIO_REJ2_TRIG_SRC,
	NSP_AIO_REJ2_DEF_DECISION,

	NSP_PLANAR_CAM1_ONLY,
	NSP_PRECLAMP_ENABLE,
	NSP_VIDEO_INPUT_CHANNEL,


	NSP_PARAM_END_MARKER
} NSP_PARAMS_TYPE;

typedef enum {
	NSP_IN_CHAN_STD_FOR_PORT,
	NSP_IN_CHAN_1,
	NSP_IN_CHAN_2,
	NSP_IN_CHAN_3

} NSP_VIDEO_INPUT_CHANNEL_TYPE;


typedef enum {
	NSP_VSYNC_DISABLE,
	NSP_VSYNC_LINE_WIDTH,
	NSP_VSYNC_TIME_WIDTH,
} NSP_VSYNC_MODE_TYPE;

typedef enum {
	 NSP_LPF_6_5_MHZ,
	 NSP_LPF_12_MHZ,
	 NSP_LPF_BYPASS,
} NSP_LPF_TYPE;


typedef enum {
	NSP_PGRP_CLAMP_SETTINGS=IFC_PGRP_MOD_PECULIAR1,
	NSP_PGRP_HSYNC_SETTINGS=IFC_PGRP_MOD_PECULIAR2,
	NSP_PGRP_VSYNC_SETTINGS=IFC_PGRP_MOD_PECULIAR3,
	NSP_PGRP_PIX_CLK_SETTINGS=IFC_PGRP_MOD_PECULIAR4,
	NSP_PGRP_VS_PULSE_SETTINGS=IFC_PGRP_MOD_PECULIAR5,
	NSP_PGRP_AIO_SETTINGS=IFC_PGRP_MOD_PECULIAR6,
	NSP_PGRP_REJECTOR1_SETTINGS=IFC_PGRP_MOD_PECULIAR7,
	NSP_PGRP_REJECTOR2_SETTINGS=IFC_PGRP_MOD_PECULIAR8,

} NSP_PARAM_GROUP_TYPE;




#define NSP_PGRP_CLAMP_SETTINGS_MASK	PGRP_ID_TO_MASK(NSP_PGRP_CLAMP_SETTINGS)
#define NSP_PGRP_HSYNC_SETTINGS_MASK	PGRP_ID_TO_MASK(NSP_PGRP_HSYNC_SETTINGS)
#define NSP_PGRP_VSYNC_SETTINGS_MASK	PGRP_ID_TO_MASK(NSP_PGRP_VSYNC_SETTINGS)
#define NSP_PGRP_PIX_CLK_SETTINGS_MASK	PGRP_ID_TO_MASK(NSP_PGRP_PIX_CLK_SETTINGS)
#define NSP_PGRP_VS_PULSE_SETTINGS_MASK	PGRP_ID_TO_MASK(NSP_PGRP_VS_PULSE_SETTINGS)
#define NSP_PGRP_AIO_SETTINGS_MASK		PGRP_ID_TO_MASK(NSP_PGRP_AIO_SETTINGS)
#define NSP_PGRP_REJECTOR1_SETTINGS_MASK	PGRP_ID_TO_MASK(NSP_PGRP_REJECTOR1_SETTINGS)
#define NSP_PGRP_REJECTOR2_SETTINGS_MASK	PGRP_ID_TO_MASK(NSP_PGRP_REJECTOR2_SETTINGS)

#define NSP_NUM_PARAMS (GEN_PARAM_END_MARKER+NSP_PARAM_END_MARKER-NSP_PECULIAR_PARAM_BASE)


#if defined __cplusplus && !defined NOIFCLINK

class IFC_EXT_API CNSIICam : public CP2VCam  
{
public:

	virtual int Freeze(HIFCGRAB grabID=NULL);
	virtual void UpdateParams();
	virtual ACQ_PARAMS_TYPE GetNextParam(ACQ_PARAMS_TYPE paramID,DWORD paramGroupMask=IFC_ALL_PARAM_GROUPS,BOOL includeChildGroups=TRUE);
	virtual BOOL SetLutFunction(LUTID_TYPE lutID,IFCLUTFUNC func,DWORD *constants,LUT_PORTION_TYPE lutPortion=LUT_INTELLI_WIDTH);
	virtual void ReadLutBuf(LUTID_TYPE lutID, DWORD lutAdr, DWORD numEntries, pVOID buf,LUT_PORTION_TYPE lutPortion=LUT_FULL_WORD);
	virtual void WriteLutBuf(LUTID_TYPE lutID, DWORD lutAdr,DWORD numEntries,pVOID buf,LUT_PORTION_TYPE lutPortion=LUT_FULL_WORD);
	virtual void GetLUTCaps(LPLUTCAP caps);
	virtual void SetLutPathPage(LUTID_TYPE lutID,IFC_LUT_PIX_SIZE_TYPE pxSize,DWORD pageNum) {return;};
	virtual void SetWindowGen(short x, short y, short dx, short dy);
	virtual BOOL SetCameraType(pSTRING camName,BOOL updateHW=TRUE);
	virtual void GetAttr(LPCAM_ATTR lpAttr, BOOL zoomCorrected=TRUE);
	virtual ACQ_PARAMS_TYPE GetParamIndex(ACQ_PARAMS_TYPE RawID);
	virtual void AddApplicabilityFuncs(void);
	virtual ACQ_PARAMS_TYPE GetParamAlias(ACQ_PARAMS_TYPE paramID);
	virtual pSTRING GetStdCameraType(IFC_STD_CAM_TYPE stdCamType);
	virtual BOOL GetUartPortName(char *Name, DWORD uartIndex=0);


	virtual BYTE *GetDisplayAddr(DWORD options=0);
	ACQ_PARAMS_TYPE GetParamIdFromIndex(DWORD paramIndex);

	CNSIICam(CNetSightII *nsp,DWORD port);
	virtual ~CNSIICam();
	DWORD GetInterlaceFactor();
	CNetSightII *m_nsp;

	BOOL m_isNewPort;


protected:


};

#endif


#endif // !defined(AFX_NSPCAM_H__582D6F70_E7BC_11D2_B53F_00A0C99ACB20__INCLUDED_)
